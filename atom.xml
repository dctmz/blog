<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DCTMZ&#39;s blog</title>
  
  <subtitle>一个自由的小小小团队</subtitle>
  <link href="https://dctmz.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://dctmz.github.io/blog/"/>
  <updated>2021-12-29T09:41:23.158Z</updated>
  <id>https://dctmz.github.io/blog/</id>
  
  <author>
    <name>dctmz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>h5跳转微信小程序</title>
    <link href="https://dctmz.github.io/blog/2021/12/29/h5%E8%B7%B3%E8%BD%AC%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>https://dctmz.github.io/blog/2021/12/29/h5%E8%B7%B3%E8%BD%AC%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</id>
    <published>2021-12-29T03:13:17.000Z</published>
    <updated>2021-12-29T09:41:23.158Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 h5 如何跳转微信小程序</p><span id="more"></span><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>为了更好的将用户引流到小程序。所以就需要 H5 跳到小程序的功能。用到了微信开放标签 wx-open-launch-weapp</p></blockquote><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><blockquote><p>登录微信小程序公众平台-设置-账号信息 获取小程序 AppID 及原始 ID</p><p>H5 跳转小程序的路径及参数</p><p>获取 URL Scheme</p></blockquote><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><p>html</p><pre><code>&lt;wx-open-launch-weapp username=&quot;gh_XXXX&quot; path=&quot;pages/xx/xx&quot;&gt;    &lt;script type=&quot;text/wxtag-template&quot;&gt;        &lt;button&gt;打开小程序&lt;/button&gt;    &lt;/script&gt;&lt;/wx-open-launch-weapp&gt;</code></pre><p>通过 wx-open-launch-weapp 标签可以 h5 跳转到小程序，在真机上才可以看到按钮，为了解析得到微信的标签 script 需要加上这个 type=”text/wxtag-template”，按钮的样式必须是行内样式才能有效果；在 vue 里，script 可以改成 template，能直接平铺到页面上，点击根据判断浏览器来跳转；<br>username 是小程序的原始 ID；<br>path 是跳转小程序的路径，可以带参数（按照正常的路由携带参数即可）</p><p>js</p><pre><code>// 是否为移动端export const isMobile = /(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|IEMobile)/i.test(    window.navigator.userAgent.toLowerCase());// 支付宝浏览器export const isZFBWork =/Alipay/i.test(window.navigator.userAgent.toLowerCase());// 判断是移动端且不是支付宝浏览器后跳转微信if(isMobile &amp;&amp; !isZFBWork) &#123;    // 提前获取XXXXX    window.location.href = &#39;weixin://dl/business/?t=XXXXX&#39;&#125;</code></pre><p>首先要判断是否是移动端，后判断是否是支付宝(支付宝浏览器不支持打开微信小程序，支付宝可以提示用户打开浏览器再去跳转), weixin://dl/business/?t=XXXXX（也可以转为短链）这个链接可以从浏览器唤起本地微信 app，并打开相关小程序。</p><h5 id="如何获取-URL-Scheme-weixin-dl-business-t-XXXXX-中的-XXXXX"><a href="#如何获取-URL-Scheme-weixin-dl-business-t-XXXXX-中的-XXXXX" class="headerlink" title="如何获取 URL Scheme (weixin://dl/business/?t=XXXXX 中的 XXXXX)"></a>如何获取 URL Scheme (weixin://dl/business/?t=XXXXX 中的 XXXXX)</h5><blockquote><p>通过服务端接口或在小程序管理后台「工具」-「生成 URL Scheme」入口可以获取打开小程序任意页面的 URL Scheme。适用于从短信、邮件、微信外网页等场景打开小程序。 通过 URL Scheme 打开小程序的场景值为 1065。<br>生成的 URL Scheme 如下所示：</p></blockquote><blockquote><p>weixin://dl/business/?t= <em>TICKET</em><br>iOS 系统支持识别 URL Scheme，可在短信等应用场景中直接通过 Scheme 跳转小程序。<br>Android 系统不支持直接识别 URL Scheme，用户无法通过 Scheme 正常打开小程序，开发者需要使用 H5 页面中转，再跳转到 Scheme 实现打开小程序，跳转代码示例如下：</p></blockquote><blockquote><p>location.href = ‘weixin://dl/business/?t= <em>TICKET</em>‘<br>该跳转方法可以在用户打开 H5 时立即调用，也可以在用户触发事件后调用。</p></blockquote><p>调用上限</p><blockquote><p>Scheme 将根据是否为到期有效与失效时间参数，分为短期有效 Scheme 与长期有效 Scheme：</p><p>单个小程序每日生成 Scheme 上限为 50 万个（包含短期有效 Scheme 与长期有效 Scheme）<br>有效时间超过 180 天的 Scheme 或永久有效的 Scheme 为长期有效 Scheme，单个小程序总共可生成长期有效 Scheme 上限为 10 万个，请谨慎调用<br>有效时间不超过 180 天的 Scheme 为短期有效 Scheme，单个小程序生成短期有效 Scheme 不设上限</p></blockquote><p>注意事项</p><blockquote><p>微信内的网页如需打开小程序请使用微信开放标签-小程序跳转按钮，无公众号也可以直接使用小程序身份开发网页并免鉴权跳转小程序，见云开发静态网站跳转小程序。符合开放范围的小程序可以下发支持打开小程序的短信<br>该功能基本覆盖当前用户正在使用的微信版本，开发者无需进行低版本兼容<br>只能生成已发布的小程序的 URL Scheme<br>通过 URL Scheme 跳转到微信时，可能会触发系统弹框询问，若用户选择不跳转，则无法打开小程序。请开发者妥善处理用户选择不跳转的场景<br>部分浏览器会限制打开网页直接跳转，可参考示例网页设置跳转按钮</p></blockquote><p>开放范围</p><blockquote><p>针对非个人主体小程序开放。</p></blockquote><p>跳转原理分析：</p><blockquote><p>从手机浏览器等非微信环境，跳转到微信，都是利用 weixin://dl/business/?ticket=XXXX 这种形式的微信 scheme,提供给这些商家的接口，把我们的链接转换成对应的 ticket 链接。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文介绍 h5 如何跳转微信小程序&lt;/p&gt;</summary>
    
    
    
    <category term="前端开发" scheme="https://dctmz.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="h5" scheme="https://dctmz.github.io/blog/tags/h5/"/>
    
    <category term="小程序" scheme="https://dctmz.github.io/blog/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>前端的部署方式</title>
    <link href="https://dctmz.github.io/blog/2021/12/28/%E5%89%8D%E7%AB%AF%E7%9A%84%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F/"/>
    <id>https://dctmz.github.io/blog/2021/12/28/%E5%89%8D%E7%AB%AF%E7%9A%84%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F/</id>
    <published>2021-12-28T07:42:19.000Z</published>
    <updated>2021-12-28T08:29:00.621Z</updated>
    
    <content type="html"><![CDATA[<p>随着前端的发展，从最早的静态页面，到后来的动态页面，再到后来的前后端分离，前端部署方式也随着变化。这篇文章就简单记录下，前端的一些部署方式。</p><span id="more"></span><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>其实本质上来说前端页面无非就是一些静态资源，用户通过<code>URI</code>的方式访问这些静态资源。</p><blockquote><p>在电脑术语中，统一资源标识符（Uniform Resource Identifier，URI)是一个用于标识某一互联网资源名称的字符串。 该种标识允许用户对任何（包括本地和<a href="https://baike.baidu.com/item/%E4%BA%92%E8%81%94%E7%BD%91/199186">互联网</a>）的资源通过特定的协议进行交互操作。URI由包括确定语法和相关协议的方案所定义。</p><p>– 百度百科</p></blockquote><p>那么其实只要能够有一个静态资源服务即可部署一个前端网站。</p><h2 id="访问方式"><a href="#访问方式" class="headerlink" title="访问方式"></a>访问方式</h2><p>本来通过URI用户可以直接访问资源，但是前端目前有两种路由方式</p><ul><li>hash</li><li>history</li></ul><p><code>history</code>的方式好处理，跟之前的没有太大区分，<code>hash</code>的方式就比较特别了。</p><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p>体现在URL上的话，就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.baidu.com/s?wd=name</span><br></pre></td></tr></table></figure><p>域名抛去不看，只看资源路径的话<code>/s</code>，只要服务器能够返回这个文件即可。此时需要服务器有多份静态资源，当然前端独立部署之后，也可以只有一份静态资源，具体方式往下看。</p><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>体现在URL上的话就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.baidu.com/#/s</span><br></pre></td></tr></table></figure><p>路径为<code>/</code>，那么问题来了，怎么访问到不同的资源呢，这时候服务端需要不管资源路径为什么，都必须返回一个页面文件。不同的资源通过hash来定位，即<code>#/s</code>来定位，页面通过js判断不同的hash来确定执行什么样的方法，来给用户展示不同的页面。</p><p>当然这时候需要静态服务器做一些特殊的处理，在访问任何路径的时候都返回同一个html页面。</p><h2 id="常见的部署方式"><a href="#常见的部署方式" class="headerlink" title="常见的部署方式"></a>常见的部署方式</h2><p>从上面的原理来看，部署方式就很简单了，我们常见的可能有几种</p><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p>nginx作为一个反向代理服务器，可谓是本领强大，轻松启动一个静态服务更是不在话下，只要我们把静态资源放在服务器上，然后用nginx做代理即可</p><h3 id="oss"><a href="#oss" class="headerlink" title="oss"></a>oss</h3><p>oss虽然是一个对象管理，但是它提供了一个静态网站服务，只要开启后就可以当做一个静态网站了。</p><h3 id="pages"><a href="#pages" class="headerlink" title="pages"></a>pages</h3><p>pages服务有很多，比如GitHub，gitee等都有提供。</p><h3 id="后端提供"><a href="#后端提供" class="headerlink" title="后端提供"></a>后端提供</h3><p>后端一般都会提供一个静态服务</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;随着前端的发展，从最早的静态页面，到后来的动态页面，再到后来的前后端分离，前端部署方式也随着变化。这篇文章就简单记录下，前端的一些部署方式。&lt;/p&gt;</summary>
    
    
    
    <category term="开发" scheme="https://dctmz.github.io/blog/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="前端" scheme="https://dctmz.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="deploy" scheme="https://dctmz.github.io/blog/tags/deploy/"/>
    
    <category term="front" scheme="https://dctmz.github.io/blog/tags/front/"/>
    
    <category term="webpack" scheme="https://dctmz.github.io/blog/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>闲聊团队</title>
    <link href="https://dctmz.github.io/blog/2021/12/28/%E9%97%B2%E8%81%8A%E5%9B%A2%E9%98%9F/"/>
    <id>https://dctmz.github.io/blog/2021/12/28/%E9%97%B2%E8%81%8A%E5%9B%A2%E9%98%9F/</id>
    <published>2021-12-28T07:13:53.000Z</published>
    <updated>2021-12-28T07:39:13.594Z</updated>
    
    <content type="html"><![CDATA[<p>目标一致，齐心协力。则为团队</p><p>日常工作中，经常会碰到各种各样的问题，有技术上，也有不少技术上的。通常我们碰到问题的第一想法是，我该怎么解决呢？然后一个人就不停的尝试。后来一个小故事改变了我，其实询问别人也是一种解决方案，而且可能还更有效。</p><span id="more"></span><p>我们每个人作为一个独立的个体，能力总是会有边界的。这时候团队就能帮助我们弥补这样的边界。可现实中很多人都忘记了，你旁边其实坐了一个能够帮助你的人。</p><p>之所以会想到这个，是因为我在工作和生活中经常会碰到大家都是独立的在干活，很少有团队合作的意识。</p><ul><li><p>作为一个程序员，能深切感受到程序员有一个想法，就是代码还是自己写的好，最好别让我跟别人一起写一个项目。</p></li><li><p>作为一个父亲，总想着有孩子她妈呢，再扣会儿手机，家务等会再做。</p></li><li><p>…</p></li></ul><p>在聊以下话题的时候，我想必须先有个共识，这是我在看《丰田模式》的时候的一些感悟，书中说一个企业应该是为社会创造价值，为股东创造价值，为员工创造价值，为合作伙伴创造价值，并且以长期利益为导向，而不是短期利益。如果说没有此前提，那么后面的就无从谈起了。</p><h2 id="团队需要建设"><a href="#团队需要建设" class="headerlink" title="团队需要建设"></a>团队需要建设</h2><p>团队不能凭空产生，建设团队需要我们付出行动，如何挑选团队成员，需要我们花点心思，并且应该足够重视。不断优化挑选模型。</p><p>在挑选过程中我们必须摒除偏见，这一点很难做到，我们常常用我们过往的经验来判断一个人。</p><p>给人贴标签虽然是一种快速认识人的方式，但是也给我们带来了很多负面的东西，比如不能客观和全面的看待一个人。</p><h2 id="团队需要培养"><a href="#团队需要培养" class="headerlink" title="团队需要培养"></a>团队需要培养</h2><p>我们应该跟团队共同成长，帮助团队成员达到新的高度，是我们应该和必须做的事情。</p><ul><li>组织培训</li><li>给团队成员锻炼的机会</li><li>…</li></ul><h2 id="团队的短板决定团队的总体能力"><a href="#团队的短板决定团队的总体能力" class="headerlink" title="团队的短板决定团队的总体能力"></a>团队的短板决定团队的总体能力</h2><p>有个斜木桶理论，但我个人认为即便是斜的，团队里的短板还是决定了团队的整体能力。想要摆脱，要么舍弃短板，要么补齐。</p><p>但我并不赞成舍弃，如果说员工可以舍弃，那么孩子呢？家人呢？我们需要锻炼的是团队的包容力。</p><h2 id="感性识人，理性做事"><a href="#感性识人，理性做事" class="headerlink" title="感性识人，理性做事"></a>感性识人，理性做事</h2><p>在工作中，我经常碰到很多人用感性去判断别人，而忘记了本来的目的。</p><p>理性的跟人合作需要修炼，但不是不能做到。</p><h3 id="感性识人"><a href="#感性识人" class="headerlink" title="感性识人"></a>感性识人</h3><p>在跟人交流的时候我们需要感性，需要同理心，你面对的是一个活生生的人，而不是一个理性机器，在考虑问题的时候，我们需要观察，并给出客观合理的推论。</p><p>人们有时候会开心，会沮丧，会抗拒，但这只是人的情绪，能控制情绪的人固然很好，但不能奢求每个人都能这样，所以体会别人的情绪，了解别人的感受很重要</p><h3 id="理性做事"><a href="#理性做事" class="headerlink" title="理性做事"></a>理性做事</h3><p>在了解别人之后，做出理性的判断，而不是根据表面去否定一个人，这样合作将无法继续。只有回归理性，才能不往初心，朝着目标而去。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>随着社会的发展，我们越来越不可能仅靠单打独斗就能做好一些事情，所以有一个好团队十分重要，祝愿大家能找到自己的团队，并随着团队一起成长。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;目标一致，齐心协力。则为团队&lt;/p&gt;
&lt;p&gt;日常工作中，经常会碰到各种各样的问题，有技术上，也有不少技术上的。通常我们碰到问题的第一想法是，我该怎么解决呢？然后一个人就不停的尝试。后来一个小故事改变了我，其实询问别人也是一种解决方案，而且可能还更有效。&lt;/p&gt;</summary>
    
    
    
    <category term="思考" scheme="https://dctmz.github.io/blog/categories/%E6%80%9D%E8%80%83/"/>
    
    
    <category term="team" scheme="https://dctmz.github.io/blog/tags/team/"/>
    
    <category term="团队" scheme="https://dctmz.github.io/blog/tags/%E5%9B%A2%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>前端项目代码检查工具</title>
    <link href="https://dctmz.github.io/blog/2021/12/21/%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E5%B7%A5%E5%85%B7/"/>
    <id>https://dctmz.github.io/blog/2021/12/21/%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E5%B7%A5%E5%85%B7/</id>
    <published>2021-12-21T07:03:00.000Z</published>
    <updated>2021-12-28T06:40:44.431Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍在项目开发所用到的代码检查工具</p><span id="more"></span><h2 id="原因（为什么我们需要代码检查工具）"><a href="#原因（为什么我们需要代码检查工具）" class="headerlink" title="原因（为什么我们需要代码检查工具）"></a>原因（为什么我们需要代码检查工具）</h2><h3 id="规范团队代码风格。"><a href="#规范团队代码风格。" class="headerlink" title="规范团队代码风格。"></a>规范团队代码风格。</h3><blockquote><p>每个团队或个人都会有自己的编码习惯和代码风格，为了便于后期维护和阅读，我们需要统一代码格式规范：</p><ul><li>空格，</li><li>统一缩进</li><li>命名规范</li><li>…</li></ul></blockquote><h3 id="避免开发中出现低级-bug"><a href="#避免开发中出现低级-bug" class="headerlink" title="避免开发中出现低级 bug"></a>避免开发中出现低级 bug</h3><blockquote><p>一些常见代码问题（例如手误引起的语法问题），如果在编译或运行前不能及时发现，代码中的语法问题会直接导致编译或运行时错误，影响开发效率和代码质量。</p></blockquote><h3 id="提高代码质量和开发效率"><a href="#提高代码质量和开发效率" class="headerlink" title="提高代码质量和开发效率"></a>提高代码质量和开发效率</h3><hr><h2 id="开发常用的代码检查工具"><a href="#开发常用的代码检查工具" class="headerlink" title="开发常用的代码检查工具"></a>开发常用的代码检查工具</h2><ul><li>SonarLint</li><li>Code Spell Checker</li><li>ESLint | Prettier</li><li>Git Hook</li></ul><h3 id="SonarLint"><a href="#SonarLint" class="headerlink" title="SonarLint"></a>SonarLint</h3><blockquote><p>Sonar 是一个代码质量管理的开源工具，它通过插件的形式能够识别常见的多种编程语言（例如 Java, C#, PHP, Pythod 等）代码质量问题。Sonar 可以帮你分析出以下代码质量问题：</p><p>1.不遵循代码标准； 2.潜在的缺陷，比如空指针、bug； 3.代码重复； 4.注释率不足或过高； 5.糟糕的复杂度，比如 if/循环嵌套太多、类/方法太大； 6.缺乏单元测试；</p><p>在公司中，一般是把 SonarQube 部署在服务器端，当开发人员提交代码时，Jenkins 触发 SonarQube 进行代码检查，开发人员根据代码检查结果进行问题修复。但是这样，开发人员往往只会关注被阻断的代码问题，对于 Sonar 提示的设计、性能方面的问题往往视而不见。</p><p>SonarLint 插件，可以在 IDE(Intellij Idea、Eclipse)中嵌入，这样开发人员不仅能使用 SonarLint 中内置的代码检查规则进行代码检查，也可以连接到远端服务器拉取远端规则。有了它，我们就可以在编写代码的过程中根据 SonarLint 的提示编写高质量代码了。</p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>以 vscode 为例，在侧边栏找到扩展商店搜索 [SonarLint] 点击 install。安装完成之后重新加载编辑器。</p><h4 id="代码检查"><a href="#代码检查" class="headerlink" title="代码检查"></a>代码检查</h4><p>SonarLint 插件安装后，就可以使用它对 Idea 中的项目进行代码检查了。SonarLint 能够对单个文件、整个项目、从 VCS（版本控制系统，比如 git、svn 等）拉取的被修改文件这 3 类进行检查。</p><hr><h3 id="Code-Spell-Checker"><a href="#Code-Spell-Checker" class="headerlink" title="Code Spell Checker"></a>Code Spell Checker</h3><blockquote><p>Code Spell Checker 是 VSCode 一款检查语法规则的插件，能够帮助我们检查单词拼写是否出现错误，检查的规则遵循 camelCase （驼峰拼写法）。</p></blockquote><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>打开 vscode，在侧边栏找到扩展商店搜索 [code spell checker] 点击 install。安装完成之后重新加载编辑器。</p><h4 id="代码检查-1"><a href="#代码检查-1" class="headerlink" title="代码检查"></a>代码检查</h4><p>在编写代码的过程中，变量未遵循驼峰拼写法的规则时，则会在其下方出现波浪线警告。</p><hr><h3 id="ESLint-Prettier"><a href="#ESLint-Prettier" class="headerlink" title="ESLint | Prettier"></a>ESLint | Prettier</h3><blockquote><p>ESlint 高度可定制，不依赖与特定的编码约定，用户可以自由地启用或禁用各个编码约定。</p><p>ESlint 会对我们的代码格式进行一些检测（比如分号、单双引号等），但是并不能完全统一代码风格，我们还需要一个工具 Prettier。</p><p>prettier 是校验代码格式化的工具。它并不关心你的语法是否正确，只关心你的代码格式，比如是否使用单引号，语句结尾是否使用分号等等，不仅可以用来检测 JavaScript 代码格式，还可以检测 vue 文件，react 文件。</p></blockquote><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><p>打开 vscode，在侧边栏找到扩展商店搜索 [eslint] 和 [prettier code formatter] 点击 install。安装完成之后重新加载编辑器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint -D</span><br><span class="line">npm install eslint-config-prettier -D</span><br></pre></td></tr></table></figure><h4 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h4><p>eslint 安装之后，可以执行 <code>eslint --init</code> 来生成一个默认的配置文件 .eslintrc<br>ESlint 支持 6 种格式的配置文件，其使用的优先级和说明如下：</p><ul><li>.eslintrc.js：模块定义，export 的对象即为配置对象</li><li>.eslintrc.yaml：yaml 语法</li><li>.eslintrc.yml：yaml 语法</li><li>.eslintrc.json：JSON 语法</li><li>.eslintrc：兼容 yaml 和 JSON 语法</li><li>package.json： 在 package.json 的 eslintConfig 字段中定义</li></ul><p>.eslintrc.json 文件示例：（<a href="https://cn.eslint.org/docs/user-guide/configuring">详细的配置项点击这里</a>）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;parserOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;ecmaVersion&quot;</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">&quot;sourceType&quot;</span>: <span class="string">&quot;module&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;ecmaFeatures&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;jsx&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;rules&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;semi&quot;</span>: <span class="string">&quot;error&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定配置文件</span></span><br><span class="line">eslint --config ~/my-eslint.json file.js</span><br><span class="line"><span class="comment">// 关闭配置文件</span></span><br><span class="line">eslint --no-eslintrc file.js</span><br><span class="line"><span class="comment">// 指定运行环境</span></span><br><span class="line">eslint --env browser,node file.js</span><br><span class="line"><span class="comment">// 指定需要进行代码检查的文件后缀</span></span><br><span class="line">eslint . --ext .js --ext .JSX</span><br><span class="line"><span class="comment">// 定义全局变量</span></span><br><span class="line">eslint --<span class="built_in">global</span> <span class="built_in">require</span>,<span class="attr">exports</span>:<span class="literal">true</span> file.js</span><br><span class="line"><span class="comment">// 将stdin作为代码源，指定解析器</span></span><br><span class="line">echo <span class="string">&#x27;3 ** 4&#x27;</span> | eslint --stdin --parser-options=ecmaVersion:<span class="number">7</span></span><br><span class="line"><span class="comment">// 使用缓存，指定缓存文件位置</span></span><br><span class="line">eslint <span class="string">&quot;src/**/*.js&quot;</span> --cache --cache-location <span class="string">&quot;/Users/user/.eslintcache/&quot;</span></span><br><span class="line"><span class="comment">// 指定插件</span></span><br><span class="line">eslint --plugin eslint-plugin-mocha file.js</span><br><span class="line"><span class="comment">// 关闭warning输出</span></span><br><span class="line">eslint --quiet file.js</span><br><span class="line"><span class="comment">// 指定报告输出文件</span></span><br><span class="line">eslint --output-file ./test/test.html</span><br><span class="line"><span class="comment">//修复部分问题</span></span><br><span class="line">eslint --fix</span><br></pre></td></tr></table></figure><h4 id="Prettier-配置"><a href="#Prettier-配置" class="headerlink" title="Prettier 配置"></a>Prettier 配置</h4><p>（<a href="https://prettier.io/docs/en/options.html">详细的配置项点击这里</a>）</p><p>可以在 esLint 中添加 plugin 配置 prettier。比如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  plugins: [<span class="string">&quot;prettier&quot;</span>],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    prettier/prettier: <span class="string">&quot;error&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以在项目中新建一个<code>.prettierrc.json</code>文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 尾逗号</span></span><br><span class="line">  <span class="attr">&quot;trailingComma&quot;</span>: <span class="string">&quot;es5&quot;</span>,</span><br><span class="line">  <span class="comment">// 缩进长度</span></span><br><span class="line">  <span class="attr">&quot;tabWidth&quot;</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="comment">// 代码末尾分号</span></span><br><span class="line">  <span class="attr">&quot;semi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 单引号</span></span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 单行代码最大长度</span></span><br><span class="line">  <span class="attr">&quot;printWidth&quot;</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="comment">// 对象字面量的括号</span></span><br><span class="line">  <span class="attr">&quot;bracketSpacing&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 箭头函数参数加括号</span></span><br><span class="line">  <span class="attr">&quot;arrowParens&quot;</span>: <span class="string">&quot;always&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上是开发中用到的代码检查工具。下面介绍 git hook 强制执行编码风格检测与修正。</p></blockquote><h3 id="Git-Hook"><a href="#Git-Hook" class="headerlink" title="Git Hook"></a>Git Hook</h3><blockquote><p>借助 Git Hook，可以在提交代码时执行风格检测与修正，当存在无法通过的内容时，提交会被 block，从而实现编码规范的强制性执行。</p><ul><li>husky 它会安装一系列 git hook 到项目的 .git/hook 目录中，这些钩子可以检测 package.json 中的 scripts 脚本命令配置，并在代码提交时执行它（我们这里利用 pre-commit 钩子）</li><li>lint-staged 可以取得所有被提交的文件并依次执行配置好的任务命令</li><li>styleLint/TSLint/ESlint 各种 lint 校验工具，可以配置到 lint-staged 的任务中</li><li>prettier 配置到 lint-staged 的任务中，可以实现修正可自动格式化的编码风格</li></ul><p>通过以上配置，当代码提交时，会在 pre-commit 阶段执行 .git/hook/precommit 钩子，该钩子会查找并执行 scrpits 中的 precommit 命令，于是 lint-staged 定义的任务会被逐个执行。这套方案也是当前比较流行的做法，在很多开源项目中都有所应用。</p></blockquote><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>结束语：执行 Code Review 也很重要。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文介绍在项目开发所用到的代码检查工具&lt;/p&gt;</summary>
    
    
    
    <category term="前端开发" scheme="https://dctmz.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="lint" scheme="https://dctmz.github.io/blog/tags/lint/"/>
    
    <category term="sonarLint" scheme="https://dctmz.github.io/blog/tags/sonarLint/"/>
    
    <category term="spellChecker" scheme="https://dctmz.github.io/blog/tags/spellChecker/"/>
    
  </entry>
  
  <entry>
    <title>一个npm包的发布记录</title>
    <link href="https://dctmz.github.io/blog/2021/12/02/%E4%B8%80%E4%B8%AAnpm%E5%8C%85%E7%9A%84%E5%8F%91%E5%B8%83%E8%AE%B0%E5%BD%95/"/>
    <id>https://dctmz.github.io/blog/2021/12/02/%E4%B8%80%E4%B8%AAnpm%E5%8C%85%E7%9A%84%E5%8F%91%E5%B8%83%E8%AE%B0%E5%BD%95/</id>
    <published>2021-12-02T09:33:58.000Z</published>
    <updated>2021-12-02T10:47:36.316Z</updated>
    
    <content type="html"><![CDATA[<p>项目越来越多，有很多公用功能，没必要再写一遍了，这里记录下怎么将一个 npm 包发到 npmjs.com</p><span id="more"></span><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h2 id="脚手架搭建"><a href="#脚手架搭建" class="headerlink" title="脚手架搭建"></a>脚手架搭建</h2><h2 id="开始开发"><a href="#开始开发" class="headerlink" title="开始开发"></a>开始开发</h2><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;项目越来越多，有很多公用功能，没必要再写一遍了，这里记录下怎么将一个 npm 包发到 npmjs.com&lt;/p&gt;</summary>
    
    
    
    <category term="前端开发" scheme="https://dctmz.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="npm" scheme="https://dctmz.github.io/blog/tags/npm/"/>
    
    <category term="git" scheme="https://dctmz.github.io/blog/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>postman动态设置变量</title>
    <link href="https://dctmz.github.io/blog/2021/11/30/postman%E8%AE%BE%E7%BD%AE%E5%8F%98%E9%87%8F/"/>
    <id>https://dctmz.github.io/blog/2021/11/30/postman%E8%AE%BE%E7%BD%AE%E5%8F%98%E9%87%8F/</id>
    <published>2021-11-30T08:35:30.000Z</published>
    <updated>2021-11-30T08:47:16.712Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍下我在开发中遇到了 postman 调试接口时，遇到了没个接口都需要带一个自定义的请求头，而且是动态获取的，这里记录下我是怎么做的</p><span id="more"></span><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>在开发中我碰到这种情况，每个请求接口都需要带上一个自定义的请求头，格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;Access-Token&quot;:&quot;token12345&quot;</span><br></pre></td></tr></table></figure><p>而且<code>token</code>是从登陆接口获取的，每半小时失效</p><p>这时候我设置了一个环境变量<code>&#123;&#123;TOKEN&#125;&#125;</code></p><p>那么问题来了，我怎么动态设置这个 token 呢</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>postman是提供请求前置（pre-request Script）和请求后置（Tests）的，而且在里面可以设置变量，发送请求等动作</p><h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><p>在Tests中设置，如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pm.test(<span class="string">&quot;设置token&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取登陆后的相应json</span></span><br><span class="line">    <span class="keyword">var</span> jsonData = pm.response.json();</span><br><span class="line">  <span class="comment">// 设置token</span></span><br><span class="line">   pm.environment.set(<span class="string">&#x27;TOKEN&#x27;</span>,jsonData.data.token)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此时当你每次发送请求的时候就会动态设置环境变量了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文介绍下我在开发中遇到了 postman 调试接口时，遇到了没个接口都需要带一个自定义的请求头，而且是动态获取的，这里记录下我是怎么做的&lt;/p&gt;</summary>
    
    
    
    <category term="开发工具" scheme="https://dctmz.github.io/blog/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="postman" scheme="https://dctmz.github.io/blog/tags/postman/"/>
    
    <category term="env" scheme="https://dctmz.github.io/blog/tags/env/"/>
    
  </entry>
  
  <entry>
    <title>hexo 博客搭建</title>
    <link href="https://dctmz.github.io/blog/2021/11/29/hexo-install-and-deploy/"/>
    <id>https://dctmz.github.io/blog/2021/11/29/hexo-install-and-deploy/</id>
    <published>2021-11-29T02:53:10.000Z</published>
    <updated>2021-11-30T08:48:05.390Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍博客搭建的过程</p><span id="more"></span><h2 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h2><ol><li>申请 <a href="https://github.com/">GitHub</a> 账号</li><li>创建仓库</li></ol><h2 id="安装和配置主题"><a href="#安装和配置主题" class="headerlink" title="安装和配置主题"></a>安装和配置主题</h2><h4 id="安装博客"><a href="#安装博客" class="headerlink" title="安装博客"></a>安装博客</h4><p><a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p>使用以下命令安装博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><h4 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h4><p>我这里使用的是 <a href="https://github.com/cofess/hexo-theme-pure">pure</a></p><p>在博客目录下面运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/cofess/hexo-theme-pure.git themes/pure</span><br></pre></td></tr></table></figure><h4 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h4><ol><li>在项目目录下面新建<code>_config.pure.yml</code></li><li>复制<code>themes/pure/_config.yml</code>文件的内容到<code>_config.pure.yml</code></li><li>配置你的内容</li></ol><h2 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h2><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>在项目根目录下运行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h4 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h4><p>在项目根目录下的<code>_config.yml</code>找到<code>deploy</code>配置项</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span> <span class="comment"># https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span></span><br><span class="line">  <span class="attr">branch:</span> [<span class="string">branch</span>]</span><br><span class="line">  <span class="attr">message:</span> [<span class="string">message</span>]</span><br></pre></td></tr></table></figure><p>配置好后如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:dctmz/blog.git</span> <span class="comment">#https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure><h4 id="运行发布命令"><a href="#运行发布命令" class="headerlink" title="运行发布命令"></a>运行发布命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure><h4 id="GitHub-设置"><a href="#GitHub-设置" class="headerlink" title="GitHub 设置"></a>GitHub 设置</h4><p>一般情况下，GitHub 已经自动设置好了，如果没有设置好，找到<a href="https://github.com/dctmz/blog/settings/pages">page</a>设置</p><p>我的设置如下</p><p><img data-src="https://gitee.com/dctxf/pic/raw/master/1638174253930-1638174253928.png"></p><h4 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h4><p>接下来就可以访问你的博客了，如我的网址为</p><p><a href="https://dctmz.github.io/blog/">https://dctmz.github.io/blog/</a></p><p>改为你的地址即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://[username].github.io/[repo]/</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文介绍博客搭建的过程&lt;/p&gt;</summary>
    
    
    
    <category term="开发工具" scheme="https://dctmz.github.io/blog/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="hexo" scheme="https://dctmz.github.io/blog/tags/hexo/"/>
    
    <category term="blog" scheme="https://dctmz.github.io/blog/tags/blog/"/>
    
    <category term="github" scheme="https://dctmz.github.io/blog/tags/github/"/>
    
    <category term="pure" scheme="https://dctmz.github.io/blog/tags/pure/"/>
    
  </entry>
  
</feed>
