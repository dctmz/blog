{"meta":{"title":"DCTMZ's blog","subtitle":"一个自由的小小小团队","description":"每天学习一点点，终有一天小鸟会长大","author":"dctmz","url":"https://dctmz.github.io/blog","root":"/blog/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2021-11-29T08:31:04.428Z","updated":"2021-11-29T08:31:04.428Z","comments":false,"path":"/404.html","permalink":"https://dctmz.github.io/blog/404.html","excerpt":"","text":""},{"title":"关于我们","date":"2021-12-28T06:47:43.713Z","updated":"2021-12-28T06:47:43.706Z","comments":false,"path":"about/index.html","permalink":"https://dctmz.github.io/blog/about/index.html","excerpt":"","text":"小小的公司 小小的Web Front 有一个小小的地方 记录一点小小的事情"},{"title":"书单","date":"2021-11-29T08:31:04.551Z","updated":"2021-11-29T08:31:04.550Z","comments":false,"path":"books/index.html","permalink":"https://dctmz.github.io/blog/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-11-29T08:31:04.673Z","updated":"2021-11-29T08:31:04.673Z","comments":true,"path":"links/index.html","permalink":"https://dctmz.github.io/blog/links/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-11-29T08:31:04.612Z","updated":"2021-11-29T08:31:04.612Z","comments":false,"path":"categories/index.html","permalink":"https://dctmz.github.io/blog/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-11-29T08:31:04.734Z","updated":"2021-11-29T08:31:04.734Z","comments":false,"path":"repository/index.html","permalink":"https://dctmz.github.io/blog/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-11-29T08:31:04.795Z","updated":"2021-11-29T08:31:04.795Z","comments":false,"path":"tags/index.html","permalink":"https://dctmz.github.io/blog/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"前端项目代码检查工具","slug":"前端项目代码检查工具","date":"2021-12-21T07:03:00.000Z","updated":"2021-12-28T06:40:44.431Z","comments":true,"path":"2021/12/21/前端项目代码检查工具/","link":"","permalink":"https://dctmz.github.io/blog/2021/12/21/%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E5%B7%A5%E5%85%B7/","excerpt":"本文介绍在项目开发所用到的代码检查工具","text":"本文介绍在项目开发所用到的代码检查工具 原因（为什么我们需要代码检查工具）规范团队代码风格。 每个团队或个人都会有自己的编码习惯和代码风格，为了便于后期维护和阅读，我们需要统一代码格式规范： 空格， 统一缩进 命名规范 … 避免开发中出现低级 bug 一些常见代码问题（例如手误引起的语法问题），如果在编译或运行前不能及时发现，代码中的语法问题会直接导致编译或运行时错误，影响开发效率和代码质量。 提高代码质量和开发效率 开发常用的代码检查工具 SonarLint Code Spell Checker ESLint | Prettier Git Hook SonarLint Sonar 是一个代码质量管理的开源工具，它通过插件的形式能够识别常见的多种编程语言（例如 Java, C#, PHP, Pythod 等）代码质量问题。Sonar 可以帮你分析出以下代码质量问题： 1.不遵循代码标准； 2.潜在的缺陷，比如空指针、bug； 3.代码重复； 4.注释率不足或过高； 5.糟糕的复杂度，比如 if/循环嵌套太多、类/方法太大； 6.缺乏单元测试； 在公司中，一般是把 SonarQube 部署在服务器端，当开发人员提交代码时，Jenkins 触发 SonarQube 进行代码检查，开发人员根据代码检查结果进行问题修复。但是这样，开发人员往往只会关注被阻断的代码问题，对于 Sonar 提示的设计、性能方面的问题往往视而不见。 SonarLint 插件，可以在 IDE(Intellij Idea、Eclipse)中嵌入，这样开发人员不仅能使用 SonarLint 中内置的代码检查规则进行代码检查，也可以连接到远端服务器拉取远端规则。有了它，我们就可以在编写代码的过程中根据 SonarLint 的提示编写高质量代码了。 安装以 vscode 为例，在侧边栏找到扩展商店搜索 [SonarLint] 点击 install。安装完成之后重新加载编辑器。 代码检查SonarLint 插件安装后，就可以使用它对 Idea 中的项目进行代码检查了。SonarLint 能够对单个文件、整个项目、从 VCS（版本控制系统，比如 git、svn 等）拉取的被修改文件这 3 类进行检查。 Code Spell Checker Code Spell Checker 是 VSCode 一款检查语法规则的插件，能够帮助我们检查单词拼写是否出现错误，检查的规则遵循 camelCase （驼峰拼写法）。 安装打开 vscode，在侧边栏找到扩展商店搜索 [code spell checker] 点击 install。安装完成之后重新加载编辑器。 代码检查在编写代码的过程中，变量未遵循驼峰拼写法的规则时，则会在其下方出现波浪线警告。 ESLint | Prettier ESlint 高度可定制，不依赖与特定的编码约定，用户可以自由地启用或禁用各个编码约定。 ESlint 会对我们的代码格式进行一些检测（比如分号、单双引号等），但是并不能完全统一代码风格，我们还需要一个工具 Prettier。 prettier 是校验代码格式化的工具。它并不关心你的语法是否正确，只关心你的代码格式，比如是否使用单引号，语句结尾是否使用分号等等，不仅可以用来检测 JavaScript 代码格式，还可以检测 vue 文件，react 文件。 安装打开 vscode，在侧边栏找到扩展商店搜索 [eslint] 和 [prettier code formatter] 点击 install。安装完成之后重新加载编辑器。 12npm install eslint -Dnpm install eslint-config-prettier -D 文件配置eslint 安装之后，可以执行 eslint --init 来生成一个默认的配置文件 .eslintrcESlint 支持 6 种格式的配置文件，其使用的优先级和说明如下： .eslintrc.js：模块定义，export 的对象即为配置对象 .eslintrc.yaml：yaml 语法 .eslintrc.yml：yaml 语法 .eslintrc.json：JSON 语法 .eslintrc：兼容 yaml 和 JSON 语法 package.json： 在 package.json 的 eslintConfig 字段中定义 .eslintrc.json 文件示例：（详细的配置项点击这里） 123456789101112&#123; &quot;parserOptions&quot;: &#123; &quot;ecmaVersion&quot;: 6, &quot;sourceType&quot;: &quot;module&quot;, &quot;ecmaFeatures&quot;: &#123; &quot;jsx&quot;: true &#125; &#125;, &quot;rules&quot;: &#123; &quot;semi&quot;: &quot;error&quot; &#125;&#125; 命令行12345678910111213141516171819202122// 指定配置文件eslint --config ~/my-eslint.json file.js// 关闭配置文件eslint --no-eslintrc file.js// 指定运行环境eslint --env browser,node file.js// 指定需要进行代码检查的文件后缀eslint . --ext .js --ext .JSX// 定义全局变量eslint --global require,exports:true file.js// 将stdin作为代码源，指定解析器echo &#x27;3 ** 4&#x27; | eslint --stdin --parser-options=ecmaVersion:7// 使用缓存，指定缓存文件位置eslint &quot;src/**/*.js&quot; --cache --cache-location &quot;/Users/user/.eslintcache/&quot;// 指定插件eslint --plugin eslint-plugin-mocha file.js// 关闭warning输出eslint --quiet file.js// 指定报告输出文件eslint --output-file ./test/test.html//修复部分问题eslint --fix Prettier 配置（详细的配置项点击这里） 可以在 esLint 中添加 plugin 配置 prettier。比如： 123456&#123; plugins: [&quot;prettier&quot;], rules: &#123; prettier/prettier: &quot;error&quot; &#125;&#125; 也可以在项目中新建一个.prettierrc.json文件： 12345678910111213141516&#123; // 尾逗号 &quot;trailingComma&quot;: &quot;es5&quot;, // 缩进长度 &quot;tabWidth&quot;: 4, // 代码末尾分号 &quot;semi&quot;: false, // 单引号 &quot;singleQuote&quot;: true, // 单行代码最大长度 &quot;printWidth&quot;: 100, // 对象字面量的括号 &quot;bracketSpacing&quot;: true, // 箭头函数参数加括号 &quot;arrowParens&quot;: &quot;always&quot;&#125; 以上是开发中用到的代码检查工具。下面介绍 git hook 强制执行编码风格检测与修正。 Git Hook 借助 Git Hook，可以在提交代码时执行风格检测与修正，当存在无法通过的内容时，提交会被 block，从而实现编码规范的强制性执行。 husky 它会安装一系列 git hook 到项目的 .git/hook 目录中，这些钩子可以检测 package.json 中的 scripts 脚本命令配置，并在代码提交时执行它（我们这里利用 pre-commit 钩子） lint-staged 可以取得所有被提交的文件并依次执行配置好的任务命令 styleLint/TSLint/ESlint 各种 lint 校验工具，可以配置到 lint-staged 的任务中 prettier 配置到 lint-staged 的任务中，可以实现修正可自动格式化的编码风格 通过以上配置，当代码提交时，会在 pre-commit 阶段执行 .git/hook/precommit 钩子，该钩子会查找并执行 scrpits 中的 precommit 命令，于是 lint-staged 定义的任务会被逐个执行。这套方案也是当前比较流行的做法，在很多开源项目中都有所应用。 结语结束语：执行 Code Review 也很重要。","categories":[{"name":"前端开发","slug":"前端开发","permalink":"https://dctmz.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"lint","slug":"lint","permalink":"https://dctmz.github.io/blog/tags/lint/"},{"name":"sonarLint","slug":"sonarLint","permalink":"https://dctmz.github.io/blog/tags/sonarLint/"},{"name":"spellChecker","slug":"spellChecker","permalink":"https://dctmz.github.io/blog/tags/spellChecker/"}]},{"title":"一个npm包的发布记录","slug":"一个npm包的发布记录","date":"2021-12-02T09:33:58.000Z","updated":"2021-12-02T10:47:36.316Z","comments":true,"path":"2021/12/02/一个npm包的发布记录/","link":"","permalink":"https://dctmz.github.io/blog/2021/12/02/%E4%B8%80%E4%B8%AAnpm%E5%8C%85%E7%9A%84%E5%8F%91%E5%B8%83%E8%AE%B0%E5%BD%95/","excerpt":"项目越来越多，有很多公用功能，没必要再写一遍了，这里记录下怎么将一个 npm 包发到 npmjs.com","text":"项目越来越多，有很多公用功能，没必要再写一遍了，这里记录下怎么将一个 npm 包发到 npmjs.com 前期准备脚手架搭建开始开发发布总结","categories":[{"name":"前端开发","slug":"前端开发","permalink":"https://dctmz.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"npm","slug":"npm","permalink":"https://dctmz.github.io/blog/tags/npm/"},{"name":"git","slug":"git","permalink":"https://dctmz.github.io/blog/tags/git/"}]},{"title":"postman动态设置变量","slug":"postman设置变量","date":"2021-11-30T08:35:30.000Z","updated":"2021-11-30T08:47:16.712Z","comments":true,"path":"2021/11/30/postman设置变量/","link":"","permalink":"https://dctmz.github.io/blog/2021/11/30/postman%E8%AE%BE%E7%BD%AE%E5%8F%98%E9%87%8F/","excerpt":"本文介绍下我在开发中遇到了 postman 调试接口时，遇到了没个接口都需要带一个自定义的请求头，而且是动态获取的，这里记录下我是怎么做的","text":"本文介绍下我在开发中遇到了 postman 调试接口时，遇到了没个接口都需要带一个自定义的请求头，而且是动态获取的，这里记录下我是怎么做的 原因在开发中我碰到这种情况，每个请求接口都需要带上一个自定义的请求头，格式如下 1&quot;Access-Token&quot;:&quot;token12345&quot; 而且token是从登陆接口获取的，每半小时失效 这时候我设置了一个环境变量&#123;&#123;TOKEN&#125;&#125; 那么问题来了，我怎么动态设置这个 token 呢 原理postman是提供请求前置（pre-request Script）和请求后置（Tests）的，而且在里面可以设置变量，发送请求等动作 方案在Tests中设置，如下 123456pm.test(&quot;设置token&quot;, function () &#123; // 获取登陆后的相应json var jsonData = pm.response.json(); // 设置token pm.environment.set(&#x27;TOKEN&#x27;,jsonData.data.token)&#125;); 此时当你每次发送请求的时候就会动态设置环境变量了","categories":[{"name":"开发工具","slug":"开发工具","permalink":"https://dctmz.github.io/blog/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"postman","slug":"postman","permalink":"https://dctmz.github.io/blog/tags/postman/"},{"name":"env","slug":"env","permalink":"https://dctmz.github.io/blog/tags/env/"}]},{"title":"hexo 博客搭建","slug":"hexo-install-and-deploy","date":"2021-11-29T02:53:10.000Z","updated":"2021-11-30T08:48:05.390Z","comments":true,"path":"2021/11/29/hexo-install-and-deploy/","link":"","permalink":"https://dctmz.github.io/blog/2021/11/29/hexo-install-and-deploy/","excerpt":"本文介绍博客搭建的过程","text":"本文介绍博客搭建的过程 初始化仓库 申请 GitHub 账号 创建仓库 安装和配置主题安装博客https://hexo.io/zh-cn/ 使用以下命令安装博客 12345npm install hexo-cli -ghexo init blogcd blognpm installhexo server 安装主题我这里使用的是 pure 在博客目录下面运行 1git clone https://github.com/cofess/hexo-theme-pure.git themes/pure 配置主题 在项目目录下面新建_config.pure.yml 复制themes/pure/_config.yml文件的内容到_config.pure.yml 配置你的内容 部署到 GitHub安装插件在项目根目录下运行以下命令 1npm install hexo-deployer-git --save 配置插件在项目根目录下的_config.yml找到deploy配置项 12345deploy: type: git repo: &lt;repository url&gt; # https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io branch: [branch] message: [message] 配置好后如下 1234deploy: type: git repo: git@github.com:dctmz/blog.git #https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io branch: gh-pages 运行发布命令1hexo clean &amp;&amp; hexo deploy GitHub 设置一般情况下，GitHub 已经自动设置好了，如果没有设置好，找到page设置 我的设置如下 预览接下来就可以访问你的博客了，如我的网址为 https://dctmz.github.io/blog/ 改为你的地址即可 1https://[username].github.io/[repo]/","categories":[{"name":"开发工具","slug":"开发工具","permalink":"https://dctmz.github.io/blog/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://dctmz.github.io/blog/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"https://dctmz.github.io/blog/tags/blog/"},{"name":"github","slug":"github","permalink":"https://dctmz.github.io/blog/tags/github/"},{"name":"pure","slug":"pure","permalink":"https://dctmz.github.io/blog/tags/pure/"}]}],"categories":[{"name":"前端开发","slug":"前端开发","permalink":"https://dctmz.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"开发工具","slug":"开发工具","permalink":"https://dctmz.github.io/blog/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"lint","slug":"lint","permalink":"https://dctmz.github.io/blog/tags/lint/"},{"name":"sonarLint","slug":"sonarLint","permalink":"https://dctmz.github.io/blog/tags/sonarLint/"},{"name":"spellChecker","slug":"spellChecker","permalink":"https://dctmz.github.io/blog/tags/spellChecker/"},{"name":"npm","slug":"npm","permalink":"https://dctmz.github.io/blog/tags/npm/"},{"name":"git","slug":"git","permalink":"https://dctmz.github.io/blog/tags/git/"},{"name":"postman","slug":"postman","permalink":"https://dctmz.github.io/blog/tags/postman/"},{"name":"env","slug":"env","permalink":"https://dctmz.github.io/blog/tags/env/"},{"name":"hexo","slug":"hexo","permalink":"https://dctmz.github.io/blog/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"https://dctmz.github.io/blog/tags/blog/"},{"name":"github","slug":"github","permalink":"https://dctmz.github.io/blog/tags/github/"},{"name":"pure","slug":"pure","permalink":"https://dctmz.github.io/blog/tags/pure/"}]}